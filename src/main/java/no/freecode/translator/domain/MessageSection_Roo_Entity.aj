// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package no.freecode.translator.domain;

import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import no.freecode.translator.domain.MessageSection;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MessageSection_Roo_Entity {
    
    declare @type: MessageSection: @Entity;
    
    @PersistenceContext
    transient EntityManager MessageSection.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer MessageSection.version;
    
    public Integer MessageSection.getVersion() {
        return this.version;
    }
    
    public void MessageSection.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void MessageSection.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MessageSection.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MessageSection attached = MessageSection.findMessageSection(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MessageSection.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MessageSection.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MessageSection MessageSection.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MessageSection merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MessageSection.entityManager() {
        EntityManager em = new MessageSection().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MessageSection.countMessageSections() {
        return entityManager().createQuery("select count(o) from MessageSection o", Long.class).getSingleResult();
    }
    
    public static List<MessageSection> MessageSection.findAllMessageSections() {
        return entityManager().createQuery("select o from MessageSection o", MessageSection.class).getResultList();
    }
    
    public static MessageSection MessageSection.findMessageSection(String id) {
        if (id == null || 0 == id.length()) return null;
        return entityManager().find(MessageSection.class, id);
    }
    
    public static List<MessageSection> MessageSection.findMessageSectionEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from MessageSection o", MessageSection.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
